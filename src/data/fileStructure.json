{
  "name": "src",
  "type": "directory",
  "children": [
    {
      "name": "App.jsx",
      "type": "file",
      "content": "import React from 'react';\nimport FileExplorer from './components/FileExplorer';\nimport Editor from './components/Editor';\nimport Preloader from './components/Preloader';\nimport fileStructure from './data/fileStructure.json';\nimport { ThemeProvider } from './context/ThemeContext';\nimport { AnimatePresence, motion } from 'framer-motion';\n\nfunction App() {\n  const [selectedFile, setSelectedFile] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  const handleFileSelect = (file) => {\n    if (file.type === 'file') {\n      setSelectedFile(file);\n    }\n  };\n\n  return (\n    <ThemeProvider>\n      <AnimatePresence>\n        {isLoading ? (\n          <Preloader onLoadingComplete={() => setIsLoading(false)} />\n        ) : (\n          <motion.div \n            className=\"flex flex-row h-screen bg-[#1e1e1e]\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.5 }}\n          >\n            <FileExplorer data={fileStructure} onFileSelect={handleFileSelect} />\n            <Editor file={selectedFile} />\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </ThemeProvider>\n  );\n}\n\nexport default App;",
      "language": "javascript"
    },
    {
      "name": "components",
      "type": "directory",
      "children": [
        {
          "name": "Editor.jsx",
          "type": "file",
          "content": "import React from 'react';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism-tomorrow.css';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-jsx';\nimport 'prismjs/components/prism-json';\nimport { Copy, Check } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useTheme } from '../context/ThemeContext';\n\nconst Editor = ({ file }) => {\n  const { themeColors } = useTheme();\n  const [copied, setCopied] = React.useState(false);\n  \n  React.useEffect(() => {\n    Prism.highlightAll();\n  }, [file]);\n\n  const handleCopy = async () => {\n    if (file?.content) {\n      await navigator.clipboard.writeText(file.content);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  const renderTabs = () => {\n    if (!file) return null;\n    return (\n      <div \n        className=\"h-9 flex items-center justify-between border-b\"\n        style={{ \n          backgroundColor: themeColors.sidebar,\n          borderColor: themeColors.border\n        }}\n      >\n        <motion.div \n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          className=\"flex items-center h-full px-3 text-[13px]\"\n          style={{ \n            backgroundColor: themeColors.bg,\n            color: themeColors.text\n          }}\n        >\n          {file.name}\n        </motion.div>\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          onClick={handleCopy}\n          className=\"flex items-center h-full px-3 mr-2  cursor-pointer rounded\"\n          style={{ color: themeColors.accent }}\n        >\n          <AnimatePresence mode=\"wait\">\n            {copied ? (\n              <motion.div\n                key=\"check\"\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                exit={{ scale: 0 }}\n              >\n                <Check size={16} />\n              </motion.div>\n            ) : (\n              <motion.div\n                key=\"copy\"\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                exit={{ scale: 0 }}\n              >\n                <Copy size={16} />\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.button>\n      </div>\n    );\n  };\n\n  if (!file) {\n    return (\n      <div \n        className=\"flex-1 flex items-center justify-center text-[13px]\"\n        style={{ \n          backgroundColor: themeColors.bg,\n          color: themeColors.text\n        }}\n      >\n        Select a file to view its contents\n      </div>\n    );\n  }\n\n  return (\n    <motion.div \n      className=\"flex-1 flex flex-col overflow-hidden\"\n      style={{ backgroundColor: themeColors.bg }}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      {renderTabs()}\n      <div className=\"flex-1 overflow-auto\">\n        <div className=\"p-4\">\n          <pre className=\"!bg-transparent !m-0 !p-0\">\n            <code className={`language-${file.language}`}>\n              {file.content}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default Editor;\n",
          "language": "javascript"
        },
        {
          "name": "FileExplorer.jsx",
          "type": "file",
          "content": "import React from 'react';\nimport { mdiFolder, mdiFileDocument, mdiChevronRight, mdiChevronDown, mdiFolderOpen } from '@mdi/js';\nimport Icon from '@mdi/react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Sun, Moon, Palette } from 'lucide-react';\nimport { useTheme } from '../context/ThemeContext';\n\nconst FileExplorer = ({ data, onFileSelect }) => {\n  const { theme, themeColors, toggleTheme } = useTheme();\n  const [expandedItems, setExpandedItems] = React.useState(new Set(['vs-code', 'src', 'components']));\n\n  const toggleExpand = (path) => {\n    setExpandedItems(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(path)) {\n        newSet.delete(path);\n      } else {\n        newSet.add(path);\n      }\n      return newSet;\n    });\n  };\n\n  const renderItem = (item, path = '', depth = 0) => {\n    const fullPath = `${path}/${item.name}`;\n    const isExpanded = expandedItems.has(fullPath);\n\n    if (item.type === 'file') {\n      return (\n        <motion.div\n          key={fullPath}\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          exit={{ opacity: 0, x: -20 }}\n          transition={{ duration: 0.2 }}\n          className=\"group\"\n        >\n          <div \n            className=\"flex items-center h-6 hover:bg-[#2a2d2e] cursor-pointer text-[13px]\"\n            style={{ \n              paddingLeft: `${depth * 8 + 4}px`,\n              color: themeColors.text,\n              backgroundColor: 'transparent',\n              '&:hover': { backgroundColor: themeColors.hover }\n            }}\n            onClick={() => onFileSelect(item)}\n          >\n            <Icon path={mdiFileDocument} size={0.6} style={{ color: themeColors.accent }} />\n            <span className=\"ml-1\">{item.name}</span>\n          </div>\n        </motion.div>\n      );\n    }\n\n    return (\n      <div key={fullPath}>\n        <div \n          className=\"flex items-center h-6 cursor-pointer text-[13px]\"\n          style={{ \n            paddingLeft: `${depth * 8 + 4}px`,\n            color: themeColors.text,\n            backgroundColor: 'transparent',\n            '&:hover': { backgroundColor: themeColors.hover }\n          }}\n          onClick={() => toggleExpand(fullPath)}\n        >\n          <motion.div\n            initial={false}\n            animate={{ rotate: isExpanded ? 90 : 0 }}\n          >\n            <Icon \n              path={isExpanded ? mdiChevronDown : mdiChevronRight} \n              size={0.6}\n              style={{ color: themeColors.text }}\n            />\n          </motion.div>\n          <Icon \n            path={isExpanded ? mdiFolderOpen : mdiFolder} \n            size={0.6} \n            style={{ color: themeColors.folderIcon }}\n          />\n          <span className=\"ml-1\">{item.name}</span>\n        </div>\n        <AnimatePresence>\n          {isExpanded && item.children && (\n            <motion.div\n              initial={{ height: 0, opacity: 0 }}\n              animate={{ height: 'auto', opacity: 1 }}\n              exit={{ height: 0, opacity: 0 }}\n              transition={{ duration: 0.2 }}\n            >\n              {item.children.map(child => renderItem(child, fullPath, depth + 1))}\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    );\n  };\n\n  return (\n    <div \n      className=\"md:w-2/12 h-full overflow-y-auto flex flex-col justify-between\"\n      style={{ \n        backgroundColor: themeColors.sidebar,\n        borderRight: `1px solid ${themeColors.border}`\n      }}\n    >\n      <div className=\"\">\n      <div className=\"p-2 flex justify-between items-center\">\n        <span className=\"text-[11px] uppercase tracking-wide\" style={{ color: themeColors.text }}>\n          Explorer\n        </span>\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          onClick={toggleTheme}\n          className=\"p-1 rounded hover:bg-opacity-20\"\n        >\n          {theme === 'dark' && <Moon size={16} style={{ color: themeColors.text }} />}\n          {theme === 'light' && <Sun size={16} style={{ color: themeColors.text }} />}\n          {theme === 'dracula' && <Palette size={16} style={{ color: themeColors.text }} />}\n        </motion.button>\n      </div>\n      {renderItem(data)}\n      </div>\n\n      <div className=\"flex justify-center items-center\">\n        <span className=\"text-[11px] uppercase tracking-wide\" style={{ color: themeColors.text }}>\n          Made BY CraftFossLabs\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default FileExplorer;\n",
          "language": "javascript"
        },
        {
          "name": "Preloader.jsx",
          "type": "file",
          "content": "import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Code2 } from 'lucide-react';\n\nconst Preloader = ({ onLoadingComplete }) => {\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      onLoadingComplete();\n    }, 2000);\n    return () => clearTimeout(timer);\n  }, [onLoadingComplete]);\n\n  const letterVariants = {\n    initial: { y: 100, opacity: 0 },\n    animate: i => ({\n      y: 0,\n      opacity: 1,\n      transition: {\n        delay: i * 0.1,\n        duration: 0.5,\n        ease: [0.6, -0.05, 0.01, 0.99]\n      }\n    })\n  };\n\n  const codeIconVariants = {\n    initial: { scale: 0, rotate: -180 },\n    animate: {\n      scale: 1,\n      rotate: 0,\n      transition: {\n        delay: 1.3,\n        duration: 0.5,\n        type: \"spring\",\n        stiffness: 260,\n        damping: 20\n      }\n    }\n  };\n\n  const text = \"CraftFossLabs\";\n\n  return (\n    <div className=\"fixed inset-0 flex flex-col items-center justify-center bg-[#1e1e1e] z-50\">\n      <div className=\"flex items-center mb-4\">\n        {text.split('').map((letter, i) => (\n          <motion.span\n            key={i}\n            custom={i}\n            variants={letterVariants}\n            initial=\"initial\"\n            animate=\"animate\"\n            className=\"text-4xl font-bold\"\n            style={{\n              color: i < 5 ? '#519aba' : i < 8 ? '#e7c17a' : '#bd93f9',\n              textShadow: '0 0 10px rgba(255,255,255,0.3)'\n            }}\n          >\n            {letter}\n          </motion.span>\n        ))}\n      </div>\n      <motion.div\n        variants={codeIconVariants}\n        initial=\"initial\"\n        animate=\"animate\"\n        className=\"mt-4\"\n      >\n        <Code2 size={40} className=\"text-[#519aba]\" />\n      </motion.div>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 1.5, duration: 0.5 }}\n        className=\"mt-8 text-[#cccccc] text-sm\"\n      >\n        Loading your workspace...\n      </motion.div>\n    </div>\n  );\n};\n\nexport default Preloader;\n",
          "language": "javascript"
        }
      ]
    },
    {
      "name": "context",
      "type": "directory",
      "children": [
        {
          "name": "ThemeContext.jsx",
          "type": "file",
          "content": "import React, { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext();\n\nexport const themes = {\n  dark: {\n    bg: '#1e1e1e',\n    sidebar: '#252526',\n    text: '#cccccc',\n    accent: '#519aba',\n    folderIcon: '#e7c17a',\n    hover: '#2a2d2e',\n    border: '#1e1e1e'\n  },\n  light: {\n    bg: '#ffffff',\n    sidebar: '#f3f3f3',\n    text: '#333333',\n    accent: '#0098ff',\n    folderIcon: '#dcb67a',\n    hover: '#e8e8e8',\n    border: '#e0e0e0'\n  },\n  dracula: {\n    bg: '#282a36',\n    sidebar: '#21222c',\n    text: '#f8f8f2',\n    accent: '#bd93f9',\n    folderIcon: '#ffb86c',\n    hover: '#44475a',\n    border: '#191a21'\n  }\n};\n\nexport const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('dark');\n\n  const toggleTheme = () => {\n    setTheme(current => {\n      const themeKeys = Object.keys(themes);\n      const currentIndex = themeKeys.indexOf(current);\n      const nextIndex = (currentIndex + 1) % themeKeys.length;\n      return themeKeys[nextIndex];\n    });\n  };\n\n  const themeColors = themes[theme];\n\n  return (\n    <ThemeContext.Provider value={{ theme, themeColors, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => useContext(ThemeContext);\n",
          "language": "javascript"
        }
      ]
    },
    {
      "name": "data",
      "type": "directory",
      "children": [
        {
          "name": "fileStructure.json",
          "type": "file",
          "content": "{\n  \"name\": \"src\",\n  \"type\": \"directory\",\n  \"children\": [\n    {\n      \"name\": \"App.jsx\",\n      \"type\": \"file\",\n      \"content\": \"import React from 'react';\\nimport FileExplorer from './components/FileExplorer';\\nimport Editor from './components/Editor';\\nimport Preloader from './components/Preloader';\\nimport fileStructure from './data/fileStructure.json';\\nimport { ThemeProvider } from './context/ThemeContext';\\nimport { AnimatePresence, motion } from 'framer-motion';\\n\\nfunction App() {\\n  const [selectedFile, setSelectedFile] = React.useState(null);\\n  const [isLoading, setIsLoading] = React.useState(true);\\n\\n  const handleFileSelect = (file) => {\\n    if (file.type === 'file') {\\n      setSelectedFile(file);\\n    }\\n  };\\n\\n  return (\\n    <ThemeProvider>\\n      <AnimatePresence>\\n        {isLoading ? (\\n          <Preloader onLoadingComplete={() => setIsLoading(false)} />\\n        ) : (\\n          <motion.div \\n            className=\\\"flex flex-row h-screen bg-[#1e1e1e]\\\"\\n            initial={{ opacity: 0 }}\\n            animate={{ opacity: 1 }}\\n            transition={{ duration: 0.5 }}\\n          >\\n            <FileExplorer data={fileStructure} onFileSelect={handleFileSelect} />\\n            <Editor file={selectedFile} />\\n          </motion.div>\\n        )}\\n      </AnimatePresence>\\n    </ThemeProvider>\\n  );\\n}\\n\\nexport default App;\",\n      \"language\": \"javascript\"\n    },\n    {\n      \"name\": \"components\",\n      \"type\": \"directory\",\n      \"children\": [\n        {\n          \"name\": \"Editor.jsx\",\n          \"type\": \"file\",\n          \"content\": \"import React from 'react';\\nimport Prism from 'prismjs';\\nimport 'prismjs/themes/prism-tomorrow.css';\\nimport 'prismjs/components/prism-javascript';\\nimport 'prismjs/components/prism-jsx';\\nimport 'prismjs/components/prism-json';\\nimport { Copy, Check } from 'lucide-react';\\nimport { motion, AnimatePresence } from 'framer-motion';\\nimport { useTheme } from '../context/ThemeContext';\\n\\nconst Editor = ({ file }) => {\\n  const { themeColors } = useTheme();\\n  const [copied, setCopied] = React.useState(false);\\n  \\n  React.useEffect(() => {\\n    Prism.highlightAll();\\n  }, [file]);\\n\\n  const handleCopy = async () => {\\n    if (file?.content) {\\n      await navigator.clipboard.writeText(file.content);\\n      setCopied(true);\\n      setTimeout(() => setCopied(false), 2000);\\n    }\\n  };\\n\\n  const renderTabs = () => {\\n    if (!file) return null;\\n    return (\\n      <div \\n        className=\\\"h-9 flex items-center justify-between border-b\\\"\\n        style={{ \\n          backgroundColor: themeColors.sidebar,\\n          borderColor: themeColors.border\\n        }}\\n      >\\n        <motion.div \\n          initial={{ opacity: 0, x: -20 }}\\n          animate={{ opacity: 1, x: 0 }}\\n          className=\\\"flex items-center h-full px-3 text-[13px]\\\"\\n          style={{ \\n            backgroundColor: themeColors.bg,\\n            color: themeColors.text\\n          }}\\n        >\\n          {file.name}\\n        </motion.div>\\n        <motion.button\\n          whileHover={{ scale: 1.1 }}\\n          whileTap={{ scale: 0.9 }}\\n          onClick={handleCopy}\\n          className=\\\"flex items-center h-full px-3 mr-2  cursor-pointer rounded\\\"\\n          style={{ color: themeColors.accent }}\\n        >\\n          <AnimatePresence mode=\\\"wait\\\">\\n            {copied ? (\\n              <motion.div\\n                key=\\\"check\\\"\\n                initial={{ scale: 0 }}\\n                animate={{ scale: 1 }}\\n                exit={{ scale: 0 }}\\n              >\\n                <Check size={16} />\\n              </motion.div>\\n            ) : (\\n              <motion.div\\n                key=\\\"copy\\\"\\n                initial={{ scale: 0 }}\\n                animate={{ scale: 1 }}\\n                exit={{ scale: 0 }}\\n              >\\n                <Copy size={16} />\\n              </motion.div>\\n            )}\\n          </AnimatePresence>\\n        </motion.button>\\n      </div>\\n    );\\n  };\\n\\n  if (!file) {\\n    return (\\n      <div \\n        className=\\\"flex-1 flex items-center justify-center text-[13px]\\\"\\n        style={{ \\n          backgroundColor: themeColors.bg,\\n          color: themeColors.text\\n        }}\\n      >\\n        Select a file to view its contents\\n      </div>\\n    );\\n  }\\n\\n  return (\\n    <motion.div \\n      className=\\\"flex-1 flex flex-col overflow-hidden\\\"\\n      style={{ backgroundColor: themeColors.bg }}\\n      initial={{ opacity: 0 }}\\n      animate={{ opacity: 1 }}\\n      transition={{ duration: 0.3 }}\\n    >\\n      {renderTabs()}\\n      <div className=\\\"flex-1 overflow-auto\\\">\\n        <div className=\\\"p-4\\\">\\n          <pre className=\\\"!bg-transparent !m-0 !p-0\\\">\\n            <code className={`language-${file.language}`}>\\n              {file.content}\\n            </code>\\n          </pre>\\n        </div>\\n      </div>\\n    </motion.div>\\n  );\\n};\\n\\nexport default Editor;\\n\",\n          \"language\": \"javascript\"\n        },\n        {\n          \"name\": \"FileExplorer.jsx\",\n          \"type\": \"file\",\n          \"content\": \"import React from 'react';\\nimport { mdiFolder, mdiFileDocument, mdiChevronRight, mdiChevronDown, mdiFolderOpen } from '@mdi/js';\\nimport Icon from '@mdi/react';\\nimport { motion, AnimatePresence } from 'framer-motion';\\nimport { Sun, Moon, Palette } from 'lucide-react';\\nimport { useTheme } from '../context/ThemeContext';\\n\\nconst FileExplorer = ({ data, onFileSelect }) => {\\n  const { theme, themeColors, toggleTheme } = useTheme();\\n  const [expandedItems, setExpandedItems] = React.useState(new Set(['vs-code', 'src', 'components']));\\n\\n  const toggleExpand = (path) => {\\n    setExpandedItems(prev => {\\n      const newSet = new Set(prev);\\n      if (newSet.has(path)) {\\n        newSet.delete(path);\\n      } else {\\n        newSet.add(path);\\n      }\\n      return newSet;\\n    });\\n  };\\n\\n  const renderItem = (item, path = '', depth = 0) => {\\n    const fullPath = `${path}/${item.name}`;\\n    const isExpanded = expandedItems.has(fullPath);\\n\\n    if (item.type === 'file') {\\n      return (\\n        <motion.div\\n          key={fullPath}\\n          initial={{ opacity: 0, x: -20 }}\\n          animate={{ opacity: 1, x: 0 }}\\n          exit={{ opacity: 0, x: -20 }}\\n          transition={{ duration: 0.2 }}\\n          className=\\\"group\\\"\\n        >\\n          <div \\n            className=\\\"flex items-center h-6 hover:bg-[#2a2d2e] cursor-pointer text-[13px]\\\"\\n            style={{ \\n              paddingLeft: `${depth * 8 + 4}px`,\\n              color: themeColors.text,\\n              backgroundColor: 'transparent',\\n              '&:hover': { backgroundColor: themeColors.hover }\\n            }}\\n            onClick={() => onFileSelect(item)}\\n          >\\n            <Icon path={mdiFileDocument} size={0.6} style={{ color: themeColors.accent }} />\\n            <span className=\\\"ml-1\\\">{item.name}</span>\\n          </div>\\n        </motion.div>\\n      );\\n    }\\n\\n    return (\\n      <div key={fullPath}>\\n        <div \\n          className=\\\"flex items-center h-6 cursor-pointer text-[13px]\\\"\\n          style={{ \\n            paddingLeft: `${depth * 8 + 4}px`,\\n            color: themeColors.text,\\n            backgroundColor: 'transparent',\\n            '&:hover': { backgroundColor: themeColors.hover }\\n          }}\\n          onClick={() => toggleExpand(fullPath)}\\n        >\\n          <motion.div\\n            initial={false}\\n            animate={{ rotate: isExpanded ? 90 : 0 }}\\n          >\\n            <Icon \\n              path={isExpanded ? mdiChevronDown : mdiChevronRight} \\n              size={0.6}\\n              style={{ color: themeColors.text }}\\n            />\\n          </motion.div>\\n          <Icon \\n            path={isExpanded ? mdiFolderOpen : mdiFolder} \\n            size={0.6} \\n            style={{ color: themeColors.folderIcon }}\\n          />\\n          <span className=\\\"ml-1\\\">{item.name}</span>\\n        </div>\\n        <AnimatePresence>\\n          {isExpanded && item.children && (\\n            <motion.div\\n              initial={{ height: 0, opacity: 0 }}\\n              animate={{ height: 'auto', opacity: 1 }}\\n              exit={{ height: 0, opacity: 0 }}\\n              transition={{ duration: 0.2 }}\\n            >\\n              {item.children.map(child => renderItem(child, fullPath, depth + 1))}\\n            </motion.div>\\n          )}\\n        </AnimatePresence>\\n      </div>\\n    );\\n  };\\n\\n  return (\\n    <div \\n      className=\\\"md:w-2/12 h-full overflow-y-auto flex flex-col justify-between\\\"\\n      style={{ \\n        backgroundColor: themeColors.sidebar,\\n        borderRight: `1px solid ${themeColors.border}`\\n      }}\\n    >\\n      <div className=\\\"\\\">\\n      <div className=\\\"p-2 flex justify-between items-center\\\">\\n        <span className=\\\"text-[11px] uppercase tracking-wide\\\" style={{ color: themeColors.text }}>\\n          Explorer\\n        </span>\\n        <motion.button\\n          whileHover={{ scale: 1.1 }}\\n          whileTap={{ scale: 0.9 }}\\n          onClick={toggleTheme}\\n          className=\\\"p-1 rounded hover:bg-opacity-20\\\"\\n        >\\n          {theme === 'dark' && <Moon size={16} style={{ color: themeColors.text }} />}\\n          {theme === 'light' && <Sun size={16} style={{ color: themeColors.text }} />}\\n          {theme === 'dracula' && <Palette size={16} style={{ color: themeColors.text }} />}\\n        </motion.button>\\n      </div>\\n      {renderItem(data)}\\n      </div>\\n\\n      <div className=\\\"flex justify-center items-center\\\">\\n        <span className=\\\"text-[11px] uppercase tracking-wide\\\" style={{ color: themeColors.text }}>\\n          Made BY CraftFossLabs\\n        </span>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default FileExplorer;\\n\",\n          \"language\": \"javascript\"\n        },\n        {\n          \"name\": \"Preloader.jsx\",\n          \"type\": \"file\",\n          \"content\": \"import React from 'react';\\nimport { motion } from 'framer-motion';\\nimport { Code2 } from 'lucide-react';\\n\\nconst Preloader = ({ onLoadingComplete }) => {\\n  React.useEffect(() => {\\n    const timer = setTimeout(() => {\\n      onLoadingComplete();\\n    }, 2000);\\n    return () => clearTimeout(timer);\\n  }, [onLoadingComplete]);\\n\\n  const letterVariants = {\\n    initial: { y: 100, opacity: 0 },\\n    animate: i => ({\\n      y: 0,\\n      opacity: 1,\\n      transition: {\\n        delay: i * 0.1,\\n        duration: 0.5,\\n        ease: [0.6, -0.05, 0.01, 0.99]\\n      }\\n    })\\n  };\\n\\n  const codeIconVariants = {\\n    initial: { scale: 0, rotate: -180 },\\n    animate: {\\n      scale: 1,\\n      rotate: 0,\\n      transition: {\\n        delay: 1.3,\\n        duration: 0.5,\\n        type: \\\"spring\\\",\\n        stiffness: 260,\\n        damping: 20\\n      }\\n    }\\n  };\\n\\n  const text = \\\"CraftFossLabs\\\";\\n\\n  return (\\n    <div className=\\\"fixed inset-0 flex flex-col items-center justify-center bg-[#1e1e1e] z-50\\\">\\n      <div className=\\\"flex items-center mb-4\\\">\\n        {text.split('').map((letter, i) => (\\n          <motion.span\\n            key={i}\\n            custom={i}\\n            variants={letterVariants}\\n            initial=\\\"initial\\\"\\n            animate=\\\"animate\\\"\\n            className=\\\"text-4xl font-bold\\\"\\n            style={{\\n              color: i < 5 ? '#519aba' : i < 8 ? '#e7c17a' : '#bd93f9',\\n              textShadow: '0 0 10px rgba(255,255,255,0.3)'\\n            }}\\n          >\\n            {letter}\\n          </motion.span>\\n        ))}\\n      </div>\\n      <motion.div\\n        variants={codeIconVariants}\\n        initial=\\\"initial\\\"\\n        animate=\\\"animate\\\"\\n        className=\\\"mt-4\\\"\\n      >\\n        <Code2 size={40} className=\\\"text-[#519aba]\\\" />\\n      </motion.div>\\n      <motion.div\\n        initial={{ opacity: 0, y: 20 }}\\n        animate={{ opacity: 1, y: 0 }}\\n        transition={{ delay: 1.5, duration: 0.5 }}\\n        className=\\\"mt-8 text-[#cccccc] text-sm\\\"\\n      >\\n        Loading your workspace...\\n      </motion.div>\\n    </div>\\n  );\\n};\\n\\nexport default Preloader;\\n\",\n          \"language\": \"javascript\"\n        }\n      ]\n    },\n    {\n      \"name\": \"context\",\n      \"type\": \"directory\",\n      \"children\": [\n        {\n          \"name\": \"ThemeContext.jsx\",\n          \"type\": \"file\",\n          \"content\": \"import React, { createContext, useContext, useState } from 'react';\\n\\nconst ThemeContext = createContext();\\n\\nexport const themes = {\\n  dark: {\\n    bg: '#1e1e1e',\\n    sidebar: '#252526',\\n    text: '#cccccc',\\n    accent: '#519aba',\\n    folderIcon: '#e7c17a',\\n    hover: '#2a2d2e',\\n    border: '#1e1e1e'\\n  },\\n  light: {\\n    bg: '#ffffff',\\n    sidebar: '#f3f3f3',\\n    text: '#333333',\\n    accent: '#0098ff',\\n    folderIcon: '#dcb67a',\\n    hover: '#e8e8e8',\\n    border: '#e0e0e0'\\n  },\\n  dracula: {\\n    bg: '#282a36',\\n    sidebar: '#21222c',\\n    text: '#f8f8f2',\\n    accent: '#bd93f9',\\n    folderIcon: '#ffb86c',\\n    hover: '#44475a',\\n    border: '#191a21'\\n  }\\n};\\n\\nexport const ThemeProvider = ({ children }) => {\\n  const [theme, setTheme] = useState('dark');\\n\\n  const toggleTheme = () => {\\n    setTheme(current => {\\n      const themeKeys = Object.keys(themes);\\n      const currentIndex = themeKeys.indexOf(current);\\n      const nextIndex = (currentIndex + 1) % themeKeys.length;\\n      return themeKeys[nextIndex];\\n    });\\n  };\\n\\n  const themeColors = themes[theme];\\n\\n  return (\\n    <ThemeContext.Provider value={{ theme, themeColors, toggleTheme }}>\\n      {children}\\n    </ThemeContext.Provider>\\n  );\\n};\\n\\nexport const useTheme = () => useContext(ThemeContext);\\n\",\n          \"language\": \"javascript\"\n        }\n      ]\n    },\n    {\n      \"name\": \"data\",\n      \"type\": \"directory\",\n      \"children\": [\n        {\n          \"name\": \"fileStructure.json\",\n          \"type\": \"file\",\n          \"content\": \"{\\n  \\\"name\\\": \\\"vs-code\\\",\\n  \\\"type\\\": \\\"directory\\\",\\n  \\\"children\\\": [\\n    {\\n      \\\"name\\\": \\\"src\\\",\\n      \\\"type\\\": \\\"directory\\\",\\n      \\\"children\\\": [\\n        {\\n          \\\"name\\\": \\\"components\\\",\\n          \\\"type\\\": \\\"directory\\\",\\n          \\\"children\\\": [\\n            {\\n              \\\"name\\\": \\\"FileExplorer.jsx\\\",\\n              \\\"type\\\": \\\"file\\\",\\n              \\\"content\\\": \\\"// Your FileExplorer component code here see the content herer\\\",\\n              \\\"language\\\": \\\"javascript\\\"\\n            },\\n            {\\n              \\\"name\\\": \\\"Editor.jsx\\\",\\n              \\\"type\\\": \\\"file\\\",\\n              \\\"content\\\": \\\"// Your Editor component code here\\\",\\n              \\\"language\\\": \\\"javascript\\\"\\n            }\\n          ]\\n        },\\n        {\\n          \\\"name\\\": \\\"App.jsx\\\",\\n          \\\"type\\\": \\\"file\\\",\\n          \\\"content\\\": \\\"// Your App component code here\\\",\\n          \\\"language\\\": \\\"javascript\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"package.json\\\",\\n      \\\"type\\\": \\\"file\\\",\\n      \\\"content\\\": \\\"{\\\\n  \\\\\\\"name\\\\\\\": \\\\\\\"vs-code-clone\\\\\\\",\\\\n  \\\\\\\"version\\\\\\\": \\\\\\\"1.0.0\\\\\\\"\\\\n}\\\",\\n      \\\"language\\\": \\\"json\\\"\\n    }\\n  ]\\n}\\n\",\n          \"language\": \"json\"\n        }\n      ]\n    },\n    {\n      \"name\": \"index.css\",\n      \"type\": \"file\",\n      \"content\": \"@import \\\"tailwindcss\\\";\",\n      \"language\": \"css\"\n    },\n    {\n      \"name\": \"main.jsx\",\n      \"type\": \"file\",\n      \"content\": \"import { StrictMode } from 'react'\\nimport { createRoot } from 'react-dom/client'\\nimport './index.css'\\nimport App from './App.jsx'\\n\\ncreateRoot(document.getElementById('root')).render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>,\\n)\\n\",\n      \"language\": \"javascript\"\n    },\n    {\n      \"name\": \"utils\",\n      \"type\": \"directory\",\n      \"children\": [\n        {\n          \"name\": \"generateFileStructure.js\",\n          \"type\": \"file\",\n          \"content\": \"import { readFileSync, writeFileSync, statSync, readdirSync, existsSync } from 'fs';\\nimport { extname, basename, join, resolve } from 'path';\\nimport { fileURLToPath } from 'url';\\n\\nfunction getLanguageFromExtension(ext) {\\n  const languageMap = {\\n    '.js': 'javascript',\\n    '.jsx': 'javascript',\\n    '.ts': 'typescript',\\n    '.tsx': 'typescript',\\n    '.css': 'css',\\n    '.scss': 'scss',\\n    '.html': 'html',\\n    '.json': 'json',\\n    '.md': 'markdown',\\n    '.py': 'python',\\n    '.java': 'java',\\n    '.cpp': 'cpp',\\n    '.c': 'c',\\n    '.go': 'go',\\n    '.rs': 'rust',\\n    '.php': 'php'\\n  };\\n  return languageMap[ext] || 'text';\\n}\\n\\nfunction generateFileStructure(startPath) {\\n  if (!existsSync(startPath)) {\\n    console.error('Directory not found:', startPath);\\n    return null;\\n  }\\n\\n  function processDirectory(currentPath) {\\n    const stats = statSync(currentPath);\\n    const name = basename(currentPath);\\n\\n    // Skip node_modules and hidden directories\\n    if (name === 'node_modules' || name.startsWith('.')) {\\n      return null;\\n    }\\n\\n    if (stats.isFile()) {\\n      const ext = extname(name);\\n      // Skip binary files and large files\\n      if (['.exe', '.jpg', '.png', '.gif', '.pdf'].includes(ext) || stats.size > 1000000) {\\n        return {\\n          name,\\n          type: 'file',\\n          content: '// Binary or large file content not included',\\n          language: getLanguageFromExtension(ext)\\n        };\\n      }\\n\\n      try {\\n        const content = readFileSync(currentPath, 'utf8');\\n        return {\\n          name,\\n          type: 'file',\\n          content,\\n          language: getLanguageFromExtension(ext)\\n        };\\n      } catch (error) {\\n        console.error('Error reading file:', currentPath, error);\\n        return null;\\n      }\\n    }\\n\\n    if (stats.isDirectory()) {\\n      const children = readdirSync(currentPath)\\n        .map(child => processDirectory(join(currentPath, child)))\\n        .filter(Boolean);\\n\\n      return {\\n        name,\\n        type: 'directory',\\n        children\\n      };\\n    }\\n\\n    return null;\\n  }\\n\\n  const structure = processDirectory(startPath);\\n  return structure;\\n}\\n\\n// Example usage:\\nconst targetDirectory = process.argv[2] || '.';\\nconst outputFile = process.argv[3] || 'fileStructure.json';\\n\\nconst structure = generateFileStructure(resolve(targetDirectory));\\nif (structure) {\\n  writeFileSync(outputFile, JSON.stringify(structure, null, 2));\\n  console.log('File structure generated successfully in:', outputFile);\\n}\\n\",\n          \"language\": \"javascript\"\n        }\n      ]\n    }\n  ]\n}",
          "language": "json"
        }
      ]
    },
    {
      "name": "index.css",
      "type": "file",
      "content": "@import \"tailwindcss\";",
      "language": "css"
    },
    {
      "name": "main.jsx",
      "type": "file",
      "content": "import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App.jsx'\n\ncreateRoot(document.getElementById('root')).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n)\n",
      "language": "javascript"
    },
    {
      "name": "utils",
      "type": "directory",
      "children": [
        {
          "name": "generateFileStructure.js",
          "type": "file",
          "content": "import { readFileSync, writeFileSync, statSync, readdirSync, existsSync } from 'fs';\nimport { extname, basename, join, resolve } from 'path';\nimport { fileURLToPath } from 'url';\n\nfunction getLanguageFromExtension(ext) {\n  const languageMap = {\n    '.js': 'javascript',\n    '.jsx': 'javascript',\n    '.ts': 'typescript',\n    '.tsx': 'typescript',\n    '.css': 'css',\n    '.scss': 'scss',\n    '.html': 'html',\n    '.json': 'json',\n    '.md': 'markdown',\n    '.py': 'python',\n    '.java': 'java',\n    '.cpp': 'cpp',\n    '.c': 'c',\n    '.go': 'go',\n    '.rs': 'rust',\n    '.php': 'php'\n  };\n  return languageMap[ext] || 'text';\n}\n\nfunction getAssetPlaceholder(ext) {\n  const assetMap = {\n    '.png': '// This is a PNG image file',\n    '.jpg': '// This is a JPEG image file',\n    '.jpeg': '// This is a JPEG image file',\n    '.gif': '// This is a GIF image file',\n    '.svg': '// This is a SVG vector image file',\n    '.webp': '// This is a WebP image file',\n    '.ico': '// This is an ICO icon file',\n    '.pdf': '// This is a PDF document',\n    '.ttf': '// This is a TrueType font file',\n    '.woff': '// This is a Web Open Font Format file',\n    '.woff2': '// This is a Web Open Font Format 2 file',\n    '.eot': '// This is an Embedded OpenType font file',\n    '.mp4': '// This is a MP4 video file',\n    '.webm': '// This is a WebM video file',\n    '.mp3': '// This is a MP3 audio file',\n    '.wav': '// This is a WAV audio file'\n  };\n  return assetMap[ext] || '// Binary file';\n}\n\nfunction generateFileStructure(startPath) {\n  if (!existsSync(startPath)) {\n    console.error('Directory not found:', startPath);\n    return null;\n  }\n\n  function processDirectory(currentPath, depth = 0) {\n    const stats = statSync(currentPath);\n    const name = basename(currentPath);\n\n    // Allow hidden files/folders now\n    // Special handling for node_modules - only show top level\n    if (name === 'node_modules' && depth > 0) {\n      return null;\n    }\n\n    if (stats.isFile()) {\n      const ext = extname(name).toLowerCase();\n      const isAsset = ['.png', '.jpg', '.jpeg', '.gif', '.svg', '.webp', '.ico', '.pdf', \n                      '.ttf', '.woff', '.woff2', '.eot', '.mp4', '.webm', '.mp3', '.wav'].includes(ext);\n      \n      if (isAsset) {\n        return {\n          name,\n          type: 'file',\n          content: getAssetPlaceholder(ext),\n          language: 'text',\n          isAsset: true\n        };\n      }\n\n      // Skip very large text files\n      if (stats.size > 1000000) {\n        return {\n          name,\n          type: 'file',\n          content: '// File too large to display (> 1MB)',\n          language: getLanguageFromExtension(ext)\n        };\n      }\n\n      try {\n        const content = readFileSync(currentPath, 'utf8');\n        return {\n          name,\n          type: 'file',\n          content,\n          language: getLanguageFromExtension(ext)\n        };\n      } catch (error) {\n        console.error('Error reading file:', currentPath, error);\n        return {\n          name,\n          type: 'file',\n          content: '// Error reading file content',\n          language: 'text'\n        };\n      }\n    }\n\n    if (stats.isDirectory()) {\n      // Special handling for node_modules at root level\n      if (name === 'node_modules' && depth === 0) {\n        const packageJsons = [];\n        try {\n          const topLevelDirs = readdirSync(currentPath)\n            .filter(item => {\n              const itemPath = join(currentPath, item);\n              return statSync(itemPath).isDirectory() && !item.startsWith('.');\n            })\n            .slice(0, 20); // Limit to first 20 packages\n\n          topLevelDirs.forEach(dir => {\n            const pkgJsonPath = join(currentPath, dir, 'package.json');\n            if (existsSync(pkgJsonPath)) {\n              try {\n                const pkgJson = JSON.parse(readFileSync(pkgJsonPath, 'utf8'));\n                packageJsons.push({\n                  name: `${dir}/package.json`,\n                  type: 'file',\n                  content: JSON.stringify(pkgJson, null, 2),\n                  language: 'json'\n                });\n              } catch (e) {\n                // Skip if package.json can't be read\n              }\n            }\n          });\n        } catch (e) {\n          console.error('Error reading node_modules:', e);\n        }\n\n        return {\n          name,\n          type: 'directory',\n          children: packageJsons\n        };\n      }\n\n      const children = readdirSync(currentPath)\n        .map(child => processDirectory(join(currentPath, child), depth + 1))\n        .filter(Boolean);\n\n      return {\n        name,\n        type: 'directory',\n        children\n      };\n    }\n\n    return null;\n  }\n\n  const structure = processDirectory(startPath);\n  return structure;\n}\n\n// Example usage:\nconst targetDirectory = process.argv[2] || '.';\nconst outputFile = process.argv[3] || 'fileStructure.json';\n\nconst structure = generateFileStructure(resolve(targetDirectory));\nif (structure) {\n  writeFileSync(outputFile, JSON.stringify(structure, null, 2));\n  console.log('File structure generated successfully in:', outputFile);\n}\n",
          "language": "javascript"
        }
      ]
    }
  ]
}